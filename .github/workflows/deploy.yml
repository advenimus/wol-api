name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install sshpass for password authentication
        run: sudo apt-get update && sudo apt-get install -y sshpass
          
      - name: Deploy to server
        env:
          HOST: ${{ vars.HOST }}
          USERNAME: ${{ secrets.SSH_USERNAME }}
          PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_DIR: "~/docker/wol-api"
        run: |
          echo "Deploying WOL API to ${USERNAME}@${HOST}:${REMOTE_DIR}"
          
          # Check if directory exists and create if needed
          if sshpass -p "${PASSWORD}" ssh -o StrictHostKeyChecking=no ${USERNAME}@${HOST} "[ -d ~/docker/wol-api ]"; then
            echo "Directory exists - updating deployment..."
          else
            echo "Creating new deployment directory..."
            sshpass -p "${PASSWORD}" ssh -o StrictHostKeyChecking=no ${USERNAME}@${HOST} "mkdir -p ~/docker/wol-api"
          fi
          
          # Copy all necessary files (respecting .gitignore)
          echo "Copying files..."
          sshpass -p "${PASSWORD}" rsync -av \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude-from='.gitignore' \
            --exclude='.git/' \
            --exclude='.gitignore' \
            --exclude='target/' \
            --exclude='.DS_Store' \
            docker-compose.yml \
            docker/ \
            backend/ \
            scripts/ \
            data/ \
            ${USERNAME}@${HOST}:~/docker/wol-api/
          
          # Debug: Check if docker directory exists
          echo "Checking directory structure on server..."
          sshpass -p "${PASSWORD}" ssh -o StrictHostKeyChecking=no ${USERNAME}@${HOST} "ls -la ~/docker/wol-api/"
          
          # Deploy and start the containers
          echo "Starting containers on remote server..."
          sshpass -p "${PASSWORD}" ssh -o StrictHostKeyChecking=no ${USERNAME}@${HOST} "cd ~/docker/wol-api && docker-compose down && docker-compose up -d --build"
          
          echo "Deployment complete!"
          echo "API should be available at: http://${HOST}:8000"